Cardinality of relationship represents the number of entities participate in the relation. It could be categorized into three types

    one-to-one
    If you apply UNIQUE constraint on a FOREIGN KEY, that makes it a one-to-one relation. This is normally used for creating extension tables with additional attributes with one-to-one relation with a record in main table.

    one-to-many (or) many-to-one
    This is the natural cardinality achieved through simple foreign key relation. For example consider the employee and department relation where many employees work for a department. This itself if many-to-one.

    many-to-many
    For example consider student and course relation, a student can join many courses and a course can have many students which makes it a many-to-many relation. This relation is captured using a junction table as shown in the below example.

--program
    USE `DemoDB`;
     
    -- Tables 
     
    CREATE TABLE `Course`(
        `CourseID` INT PRIMARY KEY AUTO_INCREMENT,
        `Name` VARCHAR(50) NOT NULL,
        `Fee` NUMERIC(10, 2) NOT NULL
    ); 
     
    CREATE TABLE `Student`(
        `StudentID` INT PRIMARY KEY AUTO_INCREMENT,
        `FirstName` VARCHAR(50) NOT NULL,
        `LastName`  VARCHAR(50) NOT NULL
    ); 
     
    -- A junction table to capture many-to-many relation between  
    -- Course and Student. 
     
    CREATE TABLE `CourseEnrollments`(
        `CourseID` INT NOT NULL ,
        `StudentID` INT NOT NULL,
         CONSTRAINT fk_courseid FOREIGN KEY(`CourseID`) REFERENCES `Course`(`CourseID`),
         CONSTRAINT fk_studentid FOREIGN KEY(`StudentID`) REFERENCES `Student`(`StudentID`)
    );
     
    -- Sample insertions
     
    INSERT INTO `Course`(`Name`, `Fee`)
    VALUES('SQL',30);
     
    INSERT INTO `Course`(`Name`,`Fee`)
    VALUES('DS', 40);
     
    INSERT INTO `Student`(`FirstName`,`LastName`)
    VALUES('a','a');
     
    INSERT INTO `Student`(`FirstName`,`LastName`)
    VALUES('b','b');
     
     
    INSERT INTO `CourseEnrollments`
    VALUES(1,1);
     
    INSERT INTO `CourseEnrollments`
    VALUES(1,2);
     
    INSERT INTO `CourseEnrollments`
    VALUES(2,1);
     
    -- Query
     
    SELECT * FROM `Student`;
    SELECT * FROM `Course`;
    SELECT * FROM `CourseEnrollments`;
     
    -- Drop CourseEnrollments before dropping Course and Student. 
     
    DROP TABLE `CourseEnrollments`;
    DROP TABLE `Course`;
    DROP TABLE `Student`;
